CREATE OR REPLACE FUNCTION atomic_commitment_insertion(
  p_group_id UUID,
  p_group_member_id UUID,
  p_commitment_value TEXT
) RETURNS JSON AS $$
DECLARE
  v_all_commitments TEXT[];
  v_new_commitment_record RECORD;
  v_new_tree_version INTEGER;
  v_current_root_record RECORD;
  v_max_tree_version INTEGER;
  v_commitment_count INTEGER;
BEGIN
  -- Set reasonable timeouts
  SET lock_timeout = '30s';
  SET statement_timeout = '60s';
  
  BEGIN
    -- Step 1: Lock and read all active commitments FIRST
    WITH LOCKED_COMMITMENTS AS (
      SELECT commitment_value, created_at
      FROM ignitionzk.merkle_tree_leaves
      WHERE group_id = p_group_id AND is_active = true
      FOR UPDATE
    )
    SELECT ARRAY_AGG(commitment_value ORDER BY created_at), COUNT(*)
    INTO v_all_commitments, v_commitment_count
    FROM LOCKED_COMMITMENTS;
    
    -- Handle case where no commitments exist yet
    IF v_all_commitments IS NULL THEN
      v_all_commitments := ARRAY[]::TEXT[];
      v_commitment_count := 0;
    END IF;
    
    -- Step 2: Calculate tree version based on commitment count (after this insertion)
    -- Tree version = number of commitments after insertion
    v_new_tree_version := v_commitment_count + 1;
    
    -- Step 3: Insert the new commitment
    INSERT INTO ignitionzk.merkle_tree_leaves (
      group_member_id,
      commitment_value,
      group_id,
      is_active,
      created_at
    ) VALUES (
      p_group_member_id,
      p_commitment_value,
      p_group_id,
      true,
      NOW()
    ) RETURNING * INTO v_new_commitment_record;
    
    -- Step 4: Add the new commitment to the array
    v_all_commitments := array_append(v_all_commitments, p_commitment_value);
    
    RETURN json_build_object(
      'success', true,
      'all_commitments', v_all_commitments,
      'member_count', array_length(v_all_commitments, 1),
      'commitment_id', v_new_commitment_record.commitment_id,
      'tree_version', v_new_tree_version
    );
    
  EXCEPTION
    WHEN lock_not_available THEN
      RAISE EXCEPTION 'System is busy, please try again in a moment';
    WHEN OTHERS THEN
      RAISE EXCEPTION 'Commitment insertion failed: %', SQLERRM;
  END;
END;
$$ LANGUAGE plpgsql;